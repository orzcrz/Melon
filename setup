#!/usr/bin/env bash

# Created by crzorz on 2022/09/15
# Copyright © 2022 BaldStudio. All rights reserved.

set -e
set -o pipefail

function logging() {
  local log_type
  log_type=$1
  readonly log_type

  local msg
  msg=$2
  readonly msg

  local now
  now=$(date +'%F %H:%M:%S')
  readonly now

  local log_format="[${now}][${log_type}] ${msg}"

  case $log_type in
  INFO)
    echo "\033[32m${log_format}\033[0m"
    ;;
  WARNING)
    echo "\033[33m${log_format}\033[0m"
    ;;
  ERROR)
    echo "\033[31m${log_format}\033[0m"
    ;;
  esac
}

function log_info() {
  logging INFO "$*"
}

function log_warning() {
  logging WARNING "$*"
}

function log_error() {
  logging ERROR "$*"
}

cd $HOME

ROOT_DIR="$HOME/.melon"
PROFILES_DIR=$ROOT_DIR/profiles

# 安装melon
function setup_melon() {
  log_info "==> 尝试安装 melon"

  rm -rf "$ROOT_DIR"
  local url=git@github.com:orzcrz/Melon.git
  git clone --recurse-submodules $url "$ROOT_DIR"
  log_info "已下载最新版本到本地"

  cd "$ROOT_DIR"
  local py3=$(which python3)
  log_info "Use python3 path: $py3"
  local py3_v=`$py3 -V`
  log_info "python version: $py3_v"

  log_info "generate new venv."
  local venv_path="venv"
  $py3 -m venv $venv_path

  source $venv_path/bin/activate
  
  set +e
  pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
  python -m pip install --upgrade pip
  set -e

  cd $HOME
}

# arm版本的Mac上安装Homebrew
function setup_brew_if_needed() {
  log_info "==> 尝试安装 Homebrew"
  local cpu_brand=$(sysctl -n machdep.cpu.brand_string)
  local cpu_arch=$(uname -m)
  log_info "处理器信息： $cpu_brand | $cpu_arch"
  if [[ "$cpu_brand" =~ "Apple" ]] && [[ "$cpu_arch" =~ "arm" ]]; then
    if command -v brew 1>/dev/null 2>&1; then
      log_info "已存在，跳过安装"
    else
      log_info "安装 arm版 Homebrew"
      local brew_repo=/opt/homebrew
      local remote_url=https://github.com/Homebrew/brew/tarball/master
      sudo mkdir -p $brew_repo
      sudo chown -R $(whoami) $brew_repo
      curl -L $remote_url | tar xz --strip 1 -C $brew_repo
    fi
  else
    log_warning "非arm版的没适配，先手动预装吧"
    log_info '手动执行这段 ==> /bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"'
  fi
  cd $HOME
  if command -v brew 1>/dev/null 2>&1; then
    log_info "安装成功"
  else
    log_error "安装失败"
    exit 1
  fi
}

## pyenv
function setup_pyenv() {
  log_info "==> 尝试安装 pyenv"
  if command -v pyenv 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
  else
    brew install pyenv pyenv-virtualenv && log_info "已安装 pyenv"
  fi
  if command -v pyenv 1>/dev/null 2>&1; then
    log_info "安装成功"
  else
    log_error "安装失败"
  fi
}

## rbenv
function setup_rbenv() {
  log_info "==> 尝试安装 rbenv"
  if command -v rbenv 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
  else
    brew install rbenv ruby-build rbenv-vars && log_info "已安装 rbenv"
  fi

  if command -v rbenv 1>/dev/null 2>&1; then
    log_info "安装成功"
  else
    log_error "安装失败"
  fi
}

## nodenv
function setup_nodenv() {
    log_info "==> 尝试安装 nodenv"
  if command -v nodenv 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
  else
    brew install nodenv && log_info "已安装 nodenv"
  fi

  if command -v nodenv 1>/dev/null 2>&1; then
    log_info "安装成功"
  else
    log_error "安装失败"
  fi
}

## wget
function setup_wget() {
  ## wget
  log_info "==> 尝试安装 wget"
  if command -v wget 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
    return
  fi

  brew install wget && log_info "已安装 wget"
}

## cookiecutter
function setup_cookiecutter() {
  log_info "==> 尝试安装 cookiecutter"
  if command -v cookiecutter 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
    return
  fi

  brew install cookiecutter && log_info "已安装 cookiecutter"
}

## tree
function setup_tree() {
  log_info "==> 尝试安装 cookiecutter"
  if command -v tree 1>/dev/null 2>&1; then
    log_info "已存在，跳过安装"
    return
  fi

  brew install tree && log_info "已安装 tree"
}

## cocoapods
function setup_cocoapods() {
  log_info "==> 尝试安装 cocoapods"
  log_warning "算了，手动装吧，先用 rbenv 切换 ruby 到 cocoapods 需要的版本"
}

# 安装lldb工具
# https://github.com/facebook/chisel
function setup_lldb_chisel() {
  log_info "==> 尝试安装 chisel"
  brew install chisel && log_info "已安装 chisel"
}

function setup_node() {
  log_info "==> 尝试安装 node"
  log_warning "算了，手动装吧，先用 nodenv 切换 node 到需要的版本"
  log_warning "然后修改镜像 npm config set registry https://registry.npmmirror.com/"
}

echo "$(tput setaf 2)"
echo "################################"
echo "  准备配置环境"
echo "################################"
echo "$(tput sgr0)"

setup_melon

log_warning "更新以下配置"
log_warning "$HOME/.pip"
log_warning "$HOME/.lldbinit"
log_warning "$HOME/.gitignore_global"
log_warning "$HOME/.gitconfig"

log_warning "$HOME/.zshrc"
log_warning "$HOME/.zprofile"
log_warning "$HOME/.bash_profile"

ZSH_PLUGIN_DIR="$PROFILES_DIR/oh-my-zsh/custom/plugins"
log_warning "$ZSH_PLUGIN_DIR/zsh-syntax-highlighting"
log_warning "$ZSH_PLUGIN_DIR/zsh-autosuggestions"

## 软链当前配置
ln -sf "$PROFILES_DIR/.pip" "$HOME/.pip"
ln -sf "$PROFILES_DIR/lldb/.lldbinit" "$HOME/.lldbinit"

ln -sf "$PROFILES_DIR/.gitignore_global" "$HOME/.gitignore_global"
ln -sf "$PROFILES_DIR/.gitconfig" "$HOME/.gitconfig"

ln -sf "$PROFILES_DIR/.zshrc" "$HOME/.zshrc"
ln -sf "$PROFILES_DIR/.zprofile" "$HOME/.zprofile"
ln -sf "$PROFILES_DIR/.bash_profile" "$HOME/.bash_profile"

ln -sf "$PROFILES_DIR/zsh-syntax-highlighting" "$ZSH_PLUGIN_DIR/zsh-syntax-highlighting"
ln -sf "$PROFILES_DIR/zsh-autosuggestions" "$ZSH_PLUGIN_DIR/zsh-autosuggestions"

setup_brew_if_needed
setup_pyenv
setup_rbenv
setup_nodenv
setup_wget
setup_cookiecutter
setup_tree
setup_cocoapods
setup_lldb_chisel
setup_node

echo "$(tput setaf 2)"
echo "################################"
echo "  安装完成"
echo "################################"
echo "$(tput sgr0)"
